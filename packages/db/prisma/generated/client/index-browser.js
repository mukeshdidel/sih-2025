
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.1
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.1",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.DoctorScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PatientScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DoctorPatientScalarFieldEnum = {
  dp_id: 'dp_id',
  doctor_id: 'doctor_id',
  patient_id: 'patient_id',
  isActivePatient: 'isActivePatient',
  gender: 'gender',
  age: 'age',
  height: 'height',
  weight: 'weight',
  dietaryHabit: 'dietaryHabit',
  mealFrequency: 'mealFrequency',
  waterIntake: 'waterIntake',
  digestionQuality: 'digestionQuality',
  bowelMovement: 'bowelMovement',
  priority: 'priority',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastConsultation: 'lastConsultation',
  nextConsultation: 'nextConsultation'
};

exports.Prisma.CriticalHealthConditionScalarFieldEnum = {
  chc_id: 'chc_id',
  name: 'name',
  description: 'description'
};

exports.Prisma.ChcPatientScalarFieldEnum = {
  chc_id: 'chc_id',
  dp_id: 'dp_id',
  diagnosed: 'diagnosed',
  resolved: 'resolved'
};

exports.Prisma.CuisineScalarFieldEnum = {
  cuisine_id: 'cuisine_id',
  name: 'name'
};

exports.Prisma.FoodScalarFieldEnum = {
  food_id: 'food_id',
  name: 'name',
  hindi_name: 'hindi_name',
  category: 'category'
};

exports.Prisma.NutrientScalarFieldEnum = {
  nutrient_id: 'nutrient_id',
  name: 'name',
  unit: 'unit'
};

exports.Prisma.RasaScalarFieldEnum = {
  rasa_id: 'rasa_id',
  name: 'name'
};

exports.Prisma.GunaScalarFieldEnum = {
  guna_id: 'guna_id',
  name: 'name'
};

exports.Prisma.DoshaScalarFieldEnum = {
  dosha_id: 'dosha_id',
  name: 'name'
};

exports.Prisma.ViryaScalarFieldEnum = {
  virya_id: 'virya_id',
  name: 'name'
};

exports.Prisma.VipakaScalarFieldEnum = {
  vipaka_id: 'vipaka_id',
  name: 'name'
};

exports.Prisma.DigestibilityScalarFieldEnum = {
  digestibility_id: 'digestibility_id',
  name: 'name'
};

exports.Prisma.RdaScalarFieldEnum = {
  rda_id: 'rda_id',
  nutrient_id: 'nutrient_id',
  age_group: 'age_group',
  gender: 'gender',
  amount: 'amount'
};

exports.Prisma.FoodNutrientScalarFieldEnum = {
  food_id: 'food_id',
  nutrient_id: 'nutrient_id',
  amount: 'amount'
};

exports.Prisma.FoodRasaScalarFieldEnum = {
  food_id: 'food_id',
  rasa_id: 'rasa_id'
};

exports.Prisma.FoodGunaScalarFieldEnum = {
  food_id: 'food_id',
  guna_id: 'guna_id'
};

exports.Prisma.FoodDoshaScalarFieldEnum = {
  food_id: 'food_id',
  dosha_id: 'dosha_id'
};

exports.Prisma.PatientDoshaScalarFieldEnum = {
  pd_id: 'pd_id',
  dosha_id: 'dosha_id'
};

exports.Prisma.FoodViryaScalarFieldEnum = {
  food_id: 'food_id',
  virya_id: 'virya_id'
};

exports.Prisma.FoodVipakaScalarFieldEnum = {
  food_id: 'food_id',
  vipaka_id: 'vipaka_id'
};

exports.Prisma.FoodDigestibilityScalarFieldEnum = {
  food_id: 'food_id',
  digestibility_id: 'digestibility_id'
};

exports.Prisma.RecipeScalarFieldEnum = {
  recipe_id: 'recipe_id',
  name: 'name',
  cuisine_id: 'cuisine_id'
};

exports.Prisma.RecipeIngredientScalarFieldEnum = {
  recipe_id: 'recipe_id',
  food_id: 'food_id',
  quantity: 'quantity'
};

exports.Prisma.DietChartScalarFieldEnum = {
  chart_id: 'chart_id',
  db_id: 'db_id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  mealSlots: 'mealSlots'
};

exports.Prisma.DietChartRecipeScalarFieldEnum = {
  chart_id: 'chart_id',
  recipe_id: 'recipe_id',
  mealTime: 'mealTime',
  WeekDay: 'WeekDay',
  food_id: 'food_id',
  quantity: 'quantity'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Gender = exports.$Enums.Gender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE'
};

exports.DietaryHabits = exports.$Enums.DietaryHabits = {
  VEGETARIAN: 'VEGETARIAN',
  VEGAN: 'VEGAN',
  NON_VEGETARIAN: 'NON_VEGETARIAN',
  EGGITARIAN: 'EGGITARIAN'
};

exports.DigestionQuality = exports.$Enums.DigestionQuality = {
  EXCELLENT: 'EXCELLENT',
  GOOD: 'GOOD',
  AVERAGE: 'AVERAGE',
  POOR: 'POOR'
};

exports.BowelMovement = exports.$Enums.BowelMovement = {
  REGULAR: 'REGULAR',
  CONSTIPATED: 'CONSTIPATED',
  LOOSE: 'LOOSE'
};

exports.Priority = exports.$Enums.Priority = {
  low: 'low',
  medium: 'medium',
  high: 'high'
};

exports.Category = exports.$Enums.Category = {
  FRUIT: 'FRUIT',
  VEGETABLE: 'VEGETABLE',
  GRAIN: 'GRAIN',
  LEGUME: 'LEGUME',
  NUT: 'NUT',
  SEED: 'SEED',
  DAIRY: 'DAIRY',
  MEAT: 'MEAT',
  FISH: 'FISH',
  EGG: 'EGG',
  SPICE: 'SPICE',
  HERB: 'HERB',
  BEVERAGE: 'BEVERAGE',
  SWEETENER: 'SWEETENER',
  OIL: 'OIL'
};

exports.AgeGroup = exports.$Enums.AgeGroup = {
  INFANT: 'INFANT',
  CHILD: 'CHILD',
  ADOLESCENT: 'ADOLESCENT',
  ADULT: 'ADULT',
  SENIOR: 'SENIOR'
};

exports.MealTime = exports.$Enums.MealTime = {
  BREAKFAST: 'BREAKFAST',
  LUNCH: 'LUNCH',
  SNACKS: 'SNACKS',
  DINNER: 'DINNER'
};

exports.Prisma.ModelName = {
  Doctor: 'Doctor',
  Patient: 'Patient',
  DoctorPatient: 'DoctorPatient',
  CriticalHealthCondition: 'CriticalHealthCondition',
  ChcPatient: 'ChcPatient',
  Cuisine: 'Cuisine',
  Food: 'Food',
  Nutrient: 'Nutrient',
  Rasa: 'Rasa',
  Guna: 'Guna',
  Dosha: 'Dosha',
  Virya: 'Virya',
  Vipaka: 'Vipaka',
  Digestibility: 'Digestibility',
  Rda: 'Rda',
  FoodNutrient: 'FoodNutrient',
  FoodRasa: 'FoodRasa',
  FoodGuna: 'FoodGuna',
  FoodDosha: 'FoodDosha',
  PatientDosha: 'PatientDosha',
  FoodVirya: 'FoodVirya',
  FoodVipaka: 'FoodVipaka',
  FoodDigestibility: 'FoodDigestibility',
  Recipe: 'Recipe',
  RecipeIngredient: 'RecipeIngredient',
  DietChart: 'DietChart',
  DietChartRecipe: 'DietChartRecipe'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
